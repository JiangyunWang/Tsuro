#!/usr/bin/env python3

import sys
import argparse
import json
from json import JSONDecodeError

def check_type(input):
    return type(input) == str or \
           ((type(input) == list) and (type(input[0]) == str)) or \
           (type(input) == dict and "this" in input and type(input["this"]) == str)

def convert_json(input):
    output = []
    json_decoder = json.JSONDecoder()
    cur_index = 0
    while len(input) > cur_index:
        if input[cur_index] == " ":
            cur_index += 1
        else:
            try:
                json_val, json_index = json_decoder.raw_decode(input[cur_index:])
                cur_index += json_index
                if check_type(json_val):
                    output.append(json_val)
            except JSONDecodeError:
                cur_index += 1
                continue;
    return output

def customSort(item):
    if type(item) == str:
        return item
    if type(item) == list:
        return item[0]
    else:
        return item["this"]

def main():
    reverse_json = False
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-up', action='store_true', default=False, dest='ascending')
    group.add_argument('-down', action='store_true', default=False, dest='descending')
    args = parser.parse_args()

    if args.descending:
        reverse_json = True

    filtered_file = convert_json(sys.stdin.read())
    sorted_file = sorted(filtered_file, key=customSort, reverse=reverse_json)
    print("\n---------------Output---------------\n")
    for item in sorted_file:
        print(item)

if __name__ == '__main__':
    main()